// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Universal.EBI.Educators.API.Data;

namespace Universal.EBI.Educators.API.Migrations
{
    [DbContext(typeof(EducatorContext))]
    partial class EducatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("EducatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId")
                        .IsUnique()
                        .HasFilter("[EducatorId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Church")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClassroomType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lunch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MeetingTime")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Region")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Educator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Excluded")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FunctionType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId")
                        .IsUnique()
                        .HasFilter("[ClassroomId] IS NOT NULL");

                    b.ToTable("Educators");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Address", b =>
                {
                    b.HasOne("Universal.EBI.Core.DomainObjects.Models.Educator", "Educator")
                        .WithOne("Address")
                        .HasForeignKey("Universal.EBI.Core.DomainObjects.Models.Address", "EducatorId");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Educator", b =>
                {
                    b.HasOne("Universal.EBI.Core.DomainObjects.Models.Classroom", "Classroom")
                        .WithOne("Educator")
                        .HasForeignKey("Universal.EBI.Core.DomainObjects.Models.Educator", "ClassroomId");

                    b.OwnsOne("Universal.EBI.Core.DomainObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("EducatorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.Property<int>("TempId1")
                                .HasColumnType("int");

                            b1.Property<int>("TempId2")
                                .HasColumnType("int");

                            b1.HasKey("EducatorId");

                            b1.ToTable("Educators");

                            b1.WithOwner()
                                .HasForeignKey("EducatorId");
                        });

                    b.OwnsOne("Universal.EBI.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EducatorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.Property<int>("TempId1")
                                .HasColumnType("int");

                            b1.Property<int>("TempId2")
                                .HasColumnType("int");

                            b1.HasKey("EducatorId");

                            b1.ToTable("Educators");

                            b1.WithOwner()
                                .HasForeignKey("EducatorId");
                        });

                    b.Navigation("Classroom");

                    b.Navigation("Cpf");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Phone", b =>
                {
                    b.HasOne("Universal.EBI.Core.DomainObjects.Models.Educator", "Educator")
                        .WithMany("Phones")
                        .HasForeignKey("EducatorId");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Classroom", b =>
                {
                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Universal.EBI.Core.DomainObjects.Models.Educator", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
